########### WireMock config ###########
test.wiremock {
  mockService.port = 4000
  mockBrokenService.port = 5000
  mockRepository.port = 4001
}

########### Modules to start ###########
# You need to specify a list of verticle to be started by Knot.x
# Each line should have a form of <alias>=<verticle-class-name>
# where alias is just a name that you can use later in order to define configuration for the module
# verticle-class-name is a fully qualified class name of the verticle
#
# If you want to test the configuration you can simply comment out or remove unnecessary modules
modules = [
  ########### Core ###########
  "server=io.knotx.server.KnotxServerVerticle"
]

########### Globals ###########
global {
  server {
    port = 9092
    routingOperations.handlers {
      request = [
        {
          name = cookieHandler
        },
        {
          name = bodyHandler
        },
        {
          name = requestContextHandler
        }
      ],
      response = [
        {
          name = headerHandler
          # Statically defined HTTP response header returned to the client in every HTTP response
          config {
            name = X-Server
            value = Knot.x-Custom-Header
          }
        },
        {
          name = writerHandler
          # List of HTTP response headers Knot.x can return to the client
          config.allowedResponseHeaders = [
            "Access-Control-Allow-Origin",
            "Content-Type",
            "Content-Length"
          ]
        }
      ]
    }
  }
  ########### Handler config ###########
  handler {
    httpRepoConnectorHandler.config {
      include required(classpath("conf/handlers/httpRepoConnectorHandler.conf"))
    }
  }
}

########### Modules configurations ###########
config.server {
  options.config {
    # Configuraiton of HTTP server
    serverOptions {
      # Knot.x server HTTP port
      port = ${global.server.port}

      # If you want a server to serve SSL connections you can configure it here
      #
      # Enable SSL
      # ssl = true
      #
      # Path on the server the keystore.jks file is located
      # keyStoreOptions.path =
      #
      # Keystore password
      # keyStoreOptions.password =
    }

    # Location of your Open API spec. It can be an absolute path, a local path or remote url (with HTTP protocol).
    routingSpecificationLocation = /openapi.yaml

    displayExceptionDetails = true
    dropRequests = false

    include required(classpath("conf/routes/operations.conf"))
  }

  # The options object carries-on configuration called DeploymentOptions for a given verticle.
  # It allows you to control the verticle behaviour, such as how many instances, classpath isolation, workers, etc.
  # See available options http://vertx.io/docs/vertx-core/dataobjects.html#DeploymentOptions
  #
  # options {}
}

include required(classpath("conf/knots/dataBridgeStack.conf"))
include required(classpath("conf/knots/templateEngineStack.conf"))
