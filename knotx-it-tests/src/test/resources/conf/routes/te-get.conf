routingOperations = ${routingOperations} [
  {
    operationId = te-get
    handlers = ${config.server.handlers.common.request} [
      {
        name = httpRepoConnectorHandler
        config = ${global.handler.httpRepoConnectorHandler.config}
      },
      {
        name = splitterHandler
      },
      {
        name = fragmentsHandler
        config = {
          # tasks that can be used in fragment configuration
          tasks {
            # task name
            templating {
              actions = [
                {
                  action = book
                },
                {
                  action = author
                },
                {
                  action = labelsRepository
                }
              ]
              # graph edges
              onTransitions {
                # default transition
                _success {
                  action = te
                }
              }
            }
          }

          # actions that are applied during graph processing
          actions {
            book {
              factory = http
              config {
                endpointOptions {
                  path = /service/mock/book.json
                  domain = localhost
                  port = ${test.wiremock.mockService.port}
                  allowedRequestHeaders = [
                    "Content-Type",
                    "X-*"
                  ]
                  additionalHeaders {
                    X-User-Agent = Knot.x
                  }
                }
              }
            }
            author {
              factory = http
              config {
                endpointOptions {
                  path = /service/mock/author.json
                  domain = localhost
                  port = ${test.wiremock.mockService.port}
                  allowedRequestHeaders = [
                    "Content-Type",
                    "X-*"
                  ]
                  additionalHeaders {
                    X-User-Agent = Knot.x
                  }
                }
              }
            }
            labelsRepository {
              factory = http
              config {
                endpointOptions {
                  path = /service/mock/labelsRepository.json
                  domain = localhost
                  port = ${test.wiremock.mockService.port}
                  allowedRequestHeaders = [
                    "Content-Type",
                    "X-*"
                  ]
                  additionalHeaders {
                    X-User-Agent = Knot.x
                  }
                }
              }
            }
            broken {
              factory = http
              config {
                endpointOptions {
                  path = /service/broken/500.json
                  domain = localhost
                  port = ${test.wiremock.mockBrokenService.port}
                  allowedRequestHeaders = [
                    "Content-Type",
                    "X-*"
                  ]
                  additionalHeaders {
                    X-User-Agent = Knot.x
                  }
                }
              }
            }
            te {
              factory = "knot"
              config {
                address = "knotx.knot.te"
                deliveryOptions {
                  sendTimeout = 3000
                }
              }
            }
          }
        }
      },
      {
        name = assemblerHandler
      }
    ] ${config.server.handlers.common.response}
  }
]
