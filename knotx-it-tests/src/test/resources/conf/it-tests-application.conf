########### Modules to start ###########
# You need to specify a list of verticle to be started by Knot.x
# Each line should have a form of <alias>=<verticle-class-name>
# where alias is just a name that you can use later in order to define configuration for the module
# verticle-class-name is a fully qualified class name of the verticle
#
# If you want to test the configuration you can simply comment out or remove unnecessary modules
modules = [
  ########### Core ###########
  "server=io.knotx.server.KnotxServerVerticle"
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle"
  "fsRepo=io.knotx.repository.fs.FilesystemRepositoryConnectorVerticle"
  "splitter=io.knotx.splitter.FragmentSplitterVerticle"
  "assembler=io.knotx.assembler.FragmentAssemblerVerticle"
  ########### Data Bridge ###########
  "dataBridge=io.knotx.databridge.core.DataBridgeKnot"
  "dataSourceHttp=io.knotx.databridge.http.HttpDataSourceAdapter"
  ########### Forms ###########
  "forms=io.knotx.forms.core.FormsKnot"
  "formsAdapter=io.knotx.forms.adapter.example.FormsExampleAdapter"
  ########### Template Engine ###########
  "templateEngine=io.knotx.te.core.TemplateEngineKnot"
]

########### Globals ###########
global {
  serverPort = 9092

  snippetOptions {
    # Knot.x snippet HTML tag name. Default is 'script'.
    # Change here if you want to use different tag name, e.g. 'knotx:snippet'
    tagName = "knotx:snippet"

    # This prefix will start every snippet parameter in the snippet tag.
    # You may set it to 'data-xxxx-' when snippet tag name is an HTML tag to keep HTML5 data naming
    # compliance, e.g. when you set it to 'data-knotx-', snippet params will look like:
    # <script data-knotx-knotx="someKnot, handlebars"
    #         data-knotx-someKnot-param-name="XYZ" >
    paramsPrefix = ""
  }

  assembler.address = knotx.core.assembler
  splitter.address = knotx.core.splitter

  repositories {
    httpRepo.address = knotx.core.repository.http
    fsRepo.address = knotx.core.repository.filesystem
  }

  # Knot.x Forms
  forms {
    address = knotx.knot.forms
    # this module is set as mock
    adapter.address = knotx.forms.adapter
  }

  # Data Bridge globals
  bridge {
    address = knotx.knot.databridge
    dataSource {
      http.address = knotx.bridge.datasource.http
    }
  }

  # Knot.x Template Engine
  templateEngine.address = knotx.knot.te
}

########### WireMock config ###########
test.wiremock {
  mockService {
    port = 4000
  }
  mockRepository {
    port = 4001
  }
}

########### Modules configurations ###########
config.server {
  options.config {
    include required("conf/includes/server.conf")
  }

  # The options object carries-on configuration called DeploymentOptions for a given verticle.
  # It allows you to control the verticle behaviour, such as how many instances, classpath isolation, workers, etc.
  # See available options http://vertx.io/docs/vertx-core/dataobjects.html#DeploymentOptions
  #
  # options {}
}

config.httpRepo {
  options.config {
    include required("conf/includes/httpRepo.conf")
  }
}

config.fsRepo {
  options.config {
    include required("conf/includes/fsRepo.conf")
  }
}

config.splitter.options.config {
  # Event bus address on which splitter is listening on. Default is 'knotx.core.splitter'
  address = ${global.splitter.address} # Do not change

  # Knot.x snippet options. Configures e.g. HTML tag name (default is 'script') and snippet
  # params prefix (default is "data-knotx-")
  snippetOptions = ${global.snippetOptions} # Do not change
}

config.assembler.options.config {
  # Event bus address on which splitter is listening on. Default is 'knotx.core.assembler'
  address = ${global.assembler.address} # Do not change

  # Knot.x snippet options. Configures e.g. HTML tag name (default is 'script') and snippet
  # params prefix (default is "data-knotx-")
  snippetOptions = ${global.snippetOptions} # Do not change

  # Strategy how to assembly markup with snippets that were not processed by any Knot. Default is UNWRAP
  # Allowed values are: AS_IS, IGNORE, UNWRAP
  # unprocessedStrategy =
}

config.templateEngine {
  options.config {
    include required(classpath("conf/includes/templateEngine.conf"))
  }
}

config.formsKnot {
  options.config {
    include required("conf/includes/forms.conf")
  }
}

config.dataBridge {
  options.config {
    include required("conf/includes/dataBridge.conf")
  }
}

config.dataSourceHttp {
  options.config {
    include required("conf/includes/dataSourceHttp.conf")
  }
}

config.formsKnot {
  options.config {
    include "includes/forms.conf"
  }
}

//config.formsAdapter {
//  options.config {
//    include "includes/formsAdapter.conf"
//  }
//}
config.formsAdapter {
  options.config {
    address = ${global.forms.adapter.address}
  }
}
