########## Modules ##########
modules = [
  "server=io.knotx.server.KnotxServerVerticle"
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle"
  "fsRepo=io.knotx.repository.fs.FilesystemRepositoryConnectorVerticle"
  "splitter=io.knotx.splitter.FragmentSplitterVerticle"
  "assembler=io.knotx.assembler.FragmentAssemblerVerticle"
  "hbsKnot=io.knotx.knot.templating.HandlebarsKnotVerticle"
  "actionKnot=io.knotx.knot.action.ActionKnotVerticle"
  # Data Bridge
  "dataBridge=io.knotx.databridge.core.DataBridgeKnot"
  "dataSourceHttp=io.knotx.databridge.http.HttpDataSourceAdapter"
],

########### Globals ###########
global {

  server {
    port = 9092
    routingOperations.handlers {
      request = [
        {
          name = cookieHandler
        },
        {
          name = bodyHandler
        },
        {
          name = knotContextHandler
        }
      ],
      response = [
        {
          name = headerHandler
          config.name = X-Server
          config.value = Knot.x
        },
        {
          name = writerHandler
          config.allowedResponseHeaders = [
            "Access-Control-Allow-Origin",
            "Content-Type",
            "Content-Length"
          ]
        }
      ]
    }
  }


  snippetOptions {
    # Knot.x snippet HTML tag name. Default is 'script'.
    # Change here if you want to use different tag name, e.g. 'knotx:snippet'
    tagName = script

    # This prefix will start every snippet parameter in the snippet tag.
    # You may set it to 'data-xxxx-' when snippet tag name is an HTML tag to keep HTML5 data naming
    # compliance, e.g. when you set it to 'data-knotx-', snippet params will look like:
    # <script data-knotx-knotx="someKnot, handlebars"
    #         data-knotx-someKnot-param-name="XYZ" >
    paramsPrefix = data-knotx-
  }

  repositories {
    fileSystemRepo.address = knotx.core.repository.filesystem
    httpRepo.address = knotx.core.repository.http
  }

  handlebars.address = knotx.knot.handlebars

  action {
    address = knotx.knot.action
    # this module is set as mock
    adapter.address = knotx.action.adapter
  }

  # Data Bridge globals
  bridge {
    address = knotx.knot.databridge
    dataSource {
      http.address = knotx.bridge.datasource.http
    }
  }

  splitter.address = knotx.core.splitter
  assembler.address = knotx.core.assembler
}

########### WireMock config ###########
test.wiremock {
  mockService {
    port = 4000
  }
  mockRepository {
    port = 4001
  }
}

config.server.options.config {
  serverOptions.port = ${global.server.port}
  allowedResponseHeaders = [
    "Access-Control-Allow-Origin",
    "Content-Type",
    "Content-Length"
  ]
  routingSpecificationLocation = /openapi.yaml
  routingOperations = [
    {
`      operationId = te-local-get
      handlers = ${global.server.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = ${global.repositories.fileSystemRepo.address}
        },
        {
          name = splitterHandler
          config.proxyAddress = ${global.splitter.address}
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = ${global.action.address},
            onTransition.next {
              address = ${global.bridge.address},
              onTransition.next {
                address = ${global.handlebars.address}
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = ${global.assembler.address}
        }
      ] ${global.server.routingOperations.handlers.response}
    },
    {
      operationId = te-local-post
      handlers = ${global.server.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = ${global.repositories.fileSystemRepo.address}
        },
        {
          name = splitterHandler
          config.proxyAddress = ${global.splitter.address}
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = ${global.action.address},
            onTransition.next {
              address = ${global.bridge.address},
              onTransition.next {
                address = ${global.handlebars.address}
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = ${global.assembler.address}
        }
      ] ${global.server.routingOperations.handlers.response}
    },
    {
      operationId = te-remote-get
      handlers = ${global.server.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = ${global.repositories.httpRepo.address}
        },
        {
          name = splitterHandler
          config.proxyAddress = ${global.splitter.address}
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = ${global.action.address}
            onTransition.next {
              address = ${global.bridge.address}
              onTransition.next {
                address = ${global.handlebars.address}
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = ${global.assembler.address}
        }
      ] ${global.server.routingOperations.handlers.response}
    }
  ]
  displayExceptionDetails = true
  dropRequests = false
}

config.actionAdapter.options.config {
  address = ${global.action.adapter.address}
  clientOptions {
    maxPoolSize = 1000
    keepAlive = false
  }
  customRequestHeader {
    name = Server-User-Agent
    value = Knot.x
  }
  services = [
    {
      path = "/service/mock/.*"
      scheme = http
      domain = localhost
      port = ${test.wiremock.mockService.port}
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    },
    {
      scheme = http
      path = "/service/.*"
      domain = localhost
      port = 8080
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
  ]
}

config.actionKnot.options.config {
  address = ${global.action.address}
  formIdentifierName = _frmId
  adapters = [
    {
      name = subscribe-competition
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-competition.json
      allowedRequestHeaders = [
        "Cookie"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = subscribe-newsletter
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-newsletter.json
      allowedRequestHeaders = [
        "Cookie"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = step1
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-step-1.json
      allowedRequestHeaders = [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = step2
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-step-2.json
      allowedRequestHeaders = [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
  ]
}

config.httpRepo.options.config.clientDestination {
  scheme = http
  domain = localhost
  port = ${test.wiremock.mockRepository.port}
}

config.dataBridge.options.config {
  address = ${global.bridge.address}
  dataDefinitions = [
    {
      name = first-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/first.json
      cacheKey = first
    }
    {
      name = second-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/second.json
    }
    {
      name = third-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/third.json
    }
    {
      name = fourth-service,
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/fourth.json
    },
    {
      name = labelsRepository,
      adapter = ${global.bridge.dataSource.http.address}
    }
  ]
}

config.dataSourceHttp.options.config {
  address = ${global.bridge.dataSource.http.address}
  services = [
    {
      path = "/service/mock/.*"
      scheme = http
      domain = localhost
      port = ${test.wiremock.mockService.port}
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
    {
      path = "/service/.*"
      scheme = http
      domain = localhost
      port = 8080
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
  ]
}

config.hbsKnot.options.config {
  address = ${global.handlebars.address}
  cacheSize = 1000
}

config.splitter.options.config.snippetOptions {
  tagName = script
  paramsPrefix = data-knotx-
}

config.assembler.options.config.snippetOptions {
  tagName = script
  paramsPrefix = data-knotx-
}
