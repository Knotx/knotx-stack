########## Modules ##########
modules = [
  "server=io.knotx.server.KnotxServerVerticle"
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle"
  "fsRepo=io.knotx.repository.fs.FilesystemRepositoryConnectorVerticle"
  "splitter=io.knotx.splitter.FragmentSplitterVerticle"
  "assembler=io.knotx.assembler.FragmentAssemblerVerticle"
  "actionKnot=io.knotx.knot.action.ActionKnotVerticle"
  # Data Bridge
  "dataBridge=io.knotx.databridge.core.DataBridgeKnot"
  "dataSourceHttp=io.knotx.databridge.http.HttpDataSourceAdapter"
  # Template Engine
  "templateEngine=io.knotx.te.core.TemplateEngineKnot"
],

########### Globals ###########
global {
  serverPort = 9092

  snippetOptions {
    # Knot.x snippet HTML tag name. Default is 'script'.
    # Change here if you want to use different tag name, e.g. 'knotx:snippet'
    tagName = "knotx:snippet"

    # This prefix will start every snippet parameter in the snippet tag.
    # You may set it to 'data-xxxx-' when snippet tag name is an HTML tag to keep HTML5 data naming
    # compliance, e.g. when you set it to '', snippet params will look like:
    # <script knotx="someKnot, te"
    #         someKnot-param-name="XYZ" >
    paramsPrefix = ""
  }

  repositories {
    fileSystemRepo.address = knotx.core.repository.filesystem
    httpRepo.address = knotx.core.repository.http
  }

  action {
    address = knotx.knot.action
    # this module is set as mock
    adapter.address = knotx.action.adapter
  }

  # Data Bridge globals
  bridge {
    address = knotx.knot.databridge
    dataSource {
      http.address = knotx.bridge.datasource.http
    }
  }

  # Knot.x Template Engine
  templateEngine.address = knotx.knot.te
}

########### WireMock config ###########
test.wiremock {
  mockService {
    port = 4000
  }
  mockRepository {
    port = 4001
  }
}

config.server.options.config {
  serverOptions.port = ${global.serverPort}
  allowedResponseHeaders = [
    "Access-Control-Allow-Origin",
    "Content-Type",
    "Content-Length"
  ]
  defaultFlow {
    repositories = [
      {
        path = "/content/local/.*"
        address = ${global.repositories.fileSystemRepo.address}
      },
      {
        path = "/content/.*"
        address = ${global.repositories.httpRepo.address}
      }
    ]
    routing.GET.items = [
      {
        path = ".*\\.html"
        address = ${global.action.address}
        onTransition.next {
          address = ${global.bridge.address}
          onTransition.next {
            address = ${global.templateEngine.address}
          }
        }
      }
    ]
    routing.POST.items = [
      {
        path = ".*\\.html"
        address = ${global.action.address}
        onTransition.next {
          address = ${global.bridge.address}
          onTransition.next {
            address = ${global.templateEngine.address}
          }
        }
      }
    ]
  }
  displayExceptionDetails = true
  dropRequests = false
  customResponseHeader {
    name = X-Server
    value = Knot.x-Custom-Header
  }
}

config.actionAdapter.options.config {
  address = ${global.action.adapter.address}
  clientOptions {
    maxPoolSize = 1000
    keepAlive = false
  }
  customRequestHeader {
    name = Server-User-Agent
    value = Knot.x
  }
  services = [
    {
      path = "/service/mock/.*"
      scheme = http
      domain = localhost
      port = ${test.wiremock.mockService.port}
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    },
    {
      scheme = http
      path = "/service/.*"
      domain = localhost
      port = 8080
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
  ]
}

config.actionKnot.options.config {
  address = ${global.action.address}
  formIdentifierName = _frmId
  adapters = [
    {
      name = subscribe-competition
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-competition.json
      allowedRequestHeaders = [
        "Cookie"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = subscribe-newsletter
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-newsletter.json
      allowedRequestHeaders = [
        "Cookie"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = step1
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-step-1.json
      allowedRequestHeaders = [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
    {
      name = step2
      address = ${global.action.adapter.address}
      params.path = /service/mock/post-step-2.json
      allowedRequestHeaders = [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ]
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
  ]
}

config.httpRepo.options.config.clientDestination {
  scheme = http
  domain = localhost
  port = ${test.wiremock.mockRepository.port}
}

config.dataBridge.options.config {
  address = ${global.bridge.address}
  dataDefinitions = [
    {
      name = first-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/first.json
      cacheKey = first
    }
    {
      name = second-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/second.json
    }
    {
      name = third-service
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/third.json
    }
    {
      name = fourth-service,
      adapter = ${global.bridge.dataSource.http.address}
      params.path = /service/mock/fourth.json
    },
    {
      name = labelsRepository,
      adapter = ${global.bridge.dataSource.http.address}
    }
  ]
}

config.dataSourceHttp.options.config {
  address = ${global.bridge.dataSource.http.address}
  services = [
    {
      path = "/service/mock/.*"
      scheme = http
      domain = localhost
      port = ${test.wiremock.mockService.port}
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
    {
      path = "/service/.*"
      scheme = http
      domain = localhost
      port = 8080
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
  ]
}

config.templateEngine.options.config {
  address = ${global.templateEngine.address}
  defaultEngine = handlebars
  engines = [
    {
      name = handlebars
      config = {
        cacheSize = 1000
      }
    }
  ]
}

config.splitter.options.config {
  snippetOptions = ${global.snippetOptions}
}

config.assembler.options.config {
  snippetOptions = ${global.snippetOptions}
}
