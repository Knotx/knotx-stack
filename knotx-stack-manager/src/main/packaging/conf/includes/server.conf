# Configuraiton of HTTP server
serverOptions {
  # Knot.x server HTTP port
  port = ${global.serverPort}

  # If you want a server to serve SSL connections you can configure it here
  #
  # Enable SSL
  # ssl = true
  #
  # Path on the server the keystore.jks file is located
  # keyStoreOptions.path =
  #
  # Keystore password
  # keyStoreOptions.password =
}

# List of HTTP response headers Knot.x can return to the client
allowedResponseHeaders = [
  Access-Control-Allow-Origin
  Allow
  Cache-Control
  Content-Disposition
  Content-Encoding
  Content-Language
  Content-Location
  Content-MD5
  Content-Range
  Content-Type
  Content-Length
  Content-Security-Policy
  Date
  Edge-Control
  ETag
  Expires
  Last-Modified
  Location
  Pragma
  Proxy-Authenticate
  Server
  Set-Cookie
  Status
  Surrogate-Control
  Vary
  Via
  X-Frame-Options
  X-XSS-Protection
  X-Content-Type-Options
  X-UA-Compatible
  X-Request-ID
  X-Server
]

# Statically defined HTTP response header returned to the client in every HTTP response
customResponseHeader {
  name = X-Server
  value = Knot.x
}

# CSRF protection related global configuration
csrfConfig {
  # A CSRF cookie name. Default is XSRF-TOKEN
  # cookieName =

  # CSRF Cookie path. Default is /
  # cookiePath =

  # Expected CSRF header name. Default is X-XSRF-TOKEN
  #
  # headerName =

  # A secret used to initialize CSRF value generation.
  # If not set a randomly generated 20 character long value will be used
  #
  # secret =

  # THe CSRF token expiration time in milliseconds. Default is 30 minutes (1800000)
  #
  # timeout =
}

# Configuration of a default flow - aka Templating mode
defaultFlow {
  # List of the Knot.x templates repositories supported by the Server
  repositories = [
    {
      path = ".*"
      address = ${global.address.httpRepo}
    }
  ]
  # Event bus address of the Fragment splitter. Default is 'knotx.core.splitter'
  # splitter =

  # Event bus address of the Fragment assembler. Default is 'knotx.core.assembler'
  # assembler =

  # Here you can define set of routing rules for Knot processing.
  # Keep in mind that the order is important, so the most specific definitions for a given path
  # should go first, while the most general as last
  # You can define routing for each http method in the following way, e.g. for POST method
  #
  # routing.POST.items = []

  # Here is a starting definition for GET method.
  routing.GET.items = [
    {
      path = ".*"
      address = ${global.bridge.address}
      onTransition.next {
        address = ${global.address.knot.hbs}
      }
    }
    #,
    # {
    #  # Defines a regexp for a request path this routing should process
    #  path = /content/.*
    #
    #  # Enable/Disable CSRF protection. It will use the settings defined in 'csrfConfig'
    #  # If it's enabled, if the HTTP method is GET, the response will drop XSRF cookie with a token
    #  # If it's POST, it means the incomming request will have validated if there is XSRF token header and token is valid
    #  csrf = true
    #
    #  # Event bus address of the first Knot that should process the request and template got from the repository
    #  address = my.eventbus.address or ${global.address.knot.something}
    #
    #  # Define a transition to next Knot in the processing chain.
    #  onTransition {
    #    # Previous Knot might generate multiple transition signals. Here you can define
    #    # what will happen on this transition. By default all core Knots generates 'next' transition
    #    # after successfull processing.
    #    #
    #    next {
    #      # Define event bus address of Knot that should process the payload if transition will occur
    #      # address =
    #      #
    #      # Define transition to next Knot if required
    #      # onTransition {}
    #    }
    #  }
    # }
  ]

}

# Configuration of the custom flow - aka Gateway mode
# customFlow {
#   # Event bus address of the response provider.
#   # Reference the value from global config section instead of hardcoding it here.
#   responseProvider = ${global.address.knot.responseProvider}
#
#   # Here you can define a routing of request processing for each HTTP method that should be supported
#   routing.GET.items = [
#    {
#      # Regexp of the path. This path will be supported by the custom flow.
#      # Be aware that if the regexp from default flow captures the same incomming path, the custom flow will be ignored.
#      # path = "/customFlow/.*"
#
#      # An event bus address of the Knot.x gateway. It should be always set as follows.
#      # address = ${global.address.knot.gateway}
#      #
#      # Defines transition to the custom implementation that brings the business logic
#      # It's event bus address of the Knot
#      #
#      # onTransition.next.address =
#    }
#  ]
#  routing.POST.items = []
# }

# Vert.x event bus delivery options used when communicating with other verticles
# see http://vertx.io/docs/vertx-core/dataobjects.html#DeliveryOptions for the details what can be configured
#
# deliveryOptions {}

# Configuraiton of the HTTP Server access log (templating and gatway modes shares the same access log)
accessLog {
  enabled = true # Enable/Disable access log

  # Whether to log after request arrives (true), or after sending response (false). Default is false
  # immediate =

  # Access log format. Default is DEFAULT
  # Available formats: DEFAULT, SHORT, TINY
  # format =
}

# Enable/Disable stack traces on the error pages. Disable it on production
displayExceptionDetails = true

# Limit of uploaded file size in bytes. Default is -1 (unlimited).
# fileUploadLimit =

# Folder where uploaded files will be stored. Default is file-uploads folder in current working directory.
# fileUploadDirectory =

####### Server backpressure section ########

# Enable/Disable request dropping feature (backpressure). Default is disabled
dropRequests = false

# If dropRequest is enabled, a dropped requests will got HTTP response with a status code defined here. Default is 429 (Too many requests)
# dropRequestResponseCode =

# Defines a backpressure capacity buffer used when dropRequests is enabled. Default is 1000 slots
# backpressureBufferCapacity =

# A strategy how the requests are dropped (if the backpressure buffer is full). Default is DROP_LATEST.
# Available values: ERROR (terminate a sequence), DROP_LATEST, DROP_OLDEST
# backpressureStrategy =
