global.handler.fragmentsHandler.config {
  tasks {
    all-actions {
      actions = [
        {
          action = copy-payload-key
        }
        {
          action = inline-payload
        }
        {
          action = inline-body
        }
        {
          action = payload-to-body
        }
        {
          action = http
        }
        {
          action = knot
        }
      ]
    }
    all-actions-cache {
      actions = [
        {
          action = cache-copy-payload-key
        }
        {
          action = cache-inline-payload
        }
        {
          action = cache-inline-body
        }
        {
          action = cache-payload-to-body
        }
        {
          action = cache-http
        }
        {
          action = cache-knot
        }
      ]
    }
    all-actions-cb {
      actions = [
        {
          action = cb-copy-payload-key
        }
        {
          action = cb-inline-payload
        }
        {
          action = cb-inline-body
        }
        {
          action = cb-payload-to-body
        }
        {
          action = cb-http
        }
        {
          action = cb-knot
        }
      ]
    }
    cb-cache-http {
      actions = [
        {
          action = cb-cache-http
        }
        {
          action = cache-cb-http
        }
      ]
    }
  }

  actions {
    copy-payload-key {
      factory = copy-payload-key
      config {
        from = "someProperty"
        to = "someOtherProperty"
        logLevel = info
      }
    }

    inline-payload {
      factory = inline-payload
      config {
        alias = inline-payload
        payload {
          result {
            action = "inline-payload"
          }
        }
        logLevel = info
      }
    }
    inline-body {
      factory = inline-body
      config {
        body = "<b>Substituted!</b>"
        logLevel = info
      }
    }
    payload-to-body {
      factory = payload-to-body
      config {
        key = "inline-payload"
        logLevel = info
      }
    }
    http {
      factory = http
      config{
        endpointOptions {
          path = /service/mock/userInfo.json
          domain = localhost
          port = ${test.wiremock.mockService.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
      logLevel = info
    }
    knot {
      factory = knot
      config {
        address = knotx.knot.te.handlebars
        deliveryOptions {
          sendTimeout = 3000
        }
        logLevel = info
      }
    }

    cache-copy-payload-key {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = copy-payload-key
    }
    cache-inline-payload {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = inline-payload
    }
    cache-inline-body {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = inline-body
    }
    cache-payload-to-body {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = payload-to-body
    }
    cache-http {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = http
    }
    cache-knot {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = knot
    }

    cb-copy-payload-key {
      factory = cb
      config {
        circuitBreakerName = cb-copy-payload-key
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = copy-payload-key
    }
    cb-inline-payload {
      factory = cb
      config {
        circuitBreakerName = cb-inline-payload
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = inline-payload
    }
    cb-inline-body {
      factory = cb
      config {
        circuitBreakerName = cb-inline-body
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = inline-body
    }
    cb-payload-to-body {
      factory = cb
      config {
        circuitBreakerName = cb-payload-to-body
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = payload-to-body
    }
    cb-http {
      factory = cb
      config {
        circuitBreakerName = cb-http
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = http
    }
    cb-knot {
      factory = cb
      config {
        circuitBreakerName = cb-knot
        circuitBreakerOptions {
          timeout = 5000
        }
        logLevel = info
      }
      doAction = knot
    }

    cb-cache-http {
      factory = cb
      config {
        circuitBreakerName = cb-cache-http
        circuitBreakerOptions {
          timeout = 50
        }
        logLevel = info
      }
      doAction = cache-http
    }
    cache-cb-http {
      factory = cache
      config {
        cache {
          maximumSize = 1000
          ttl = 5000
        }
        type = "in-memory"
        cacheKey = "product-{param.id}"
        payloadKey = product
        logLevel = info
      }
      doAction = cb-http
    }

  }
}
