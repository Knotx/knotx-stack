global.handler.fragmentsHandler.config {
  tasks {
    # HTML Templating Scenario
    user-task {
      action = fetch-user-info // _success
      onTransitions._success {
        action = te-hbs
      }
    }
    # HTML Templating Scenario
    payments-task {
      action = fetch-user-info // _success
      onTransitions._success {
        actions = [
          {
            action = fetch-payment-providers // _success
            onTransitions._error {
              action = fetch-payment-providers-fallback
            }
          }
          {
            action = fetch-offers // _error
            onTransitions._error {
              action = fetch-offers-fallback // _success
            }
          }
          {
            action = fetch-delivery-options-cb // 2 x 500 -> _fallback
            onTransitions._fallback {
              action = fetch-delivery-fallback // _success
            }
          }
          {
            action = notify-analytics-cb // 2 x timeout -> _fallback
            onTransitions._fallback {
              action = notify-analytics-fallback // _success
            }
          }
        ]
        onTransitions._success {
          action = te-pebble // _success
        }
      }
      onTransitions._error {
        action = fetch-user-info-fallback
      }
      onTransitions._custom {
        action = fetch-user-info-custom
      }
    }
    # Web API Scenario
    web-api-test = ${global.handler.fragmentsHandler.config.tasks.payments-task}
    web-api-test.onTransitions._success.onTransitions._success.action = create-response // _success
  }

  actions {
    common-fallback-action {
      factory = http
      config.endpointOptions {
        path = /service/mock/placeholderFallback.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }

    fetch-user-info {
      factory = http
      config.endpointOptions {
        path = /service/mock/userInfo.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }

    fetch-payment-providers {
      factory = http
      config.endpointOptions {
        path = /service/mock/paymentProviders.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }

    fetch-offers {
      factory = http
      config.endpointOptions {
        path = /service/mock/specialOffers.xml
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
      config.responseOptions {
        forceJson = true
        predicates = []
      }
    }
    fetch-offers-fallback {
      factory = http
      config.endpointOptions {
        path = /service/mock/specialOffers.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }

    fetch-delivery-options-cb {
      factory = cb
      config {
        circuitBreakerName = delivery-cb
        circuitBreakerOptions {
          maxRetries = 1
          timeout = 50
        }
      }
      doAction = fetch-delivery
    }
    fetch-delivery {
      factory = http
      config.endpointOptions {
        path = /mock/scenario/delayed
        domain = localhost
        port = ${test.random.delayedService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    fetch-delivery-fallback {
      factory = inline-payload
      config {
        alias = fetch-delivery
        payload {
          _result {
            fallback = "action ended with _timeout"
          }
        }
      }
    }

    notify-analytics-cb {
      factory = cb
      config {
        circuitBreakerName = delivery-cb
      }
      doAction = notify-analytics
    }
    notify-analytics {
      factory = http
      config.httpMethod = POST
      config.endpointOptions {
        path = /mock/scenario/analytics
        domain = localhost
        port = ${test.random.brokenService.port}
        bodyJson = {
          user-data-id = "{payload.fetch-user-info._result.id}"
        }
        interpolateBody = true
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    notify-analytics-fallback = ${global.handler.fragmentsHandler.config.actions.common-fallback-action}

    fetch-payment-providers-fallback = ${global.handler.fragmentsHandler.config.actions.common-fallback-action}
    fetch-user-info-fallback = ${global.handler.fragmentsHandler.config.actions.common-fallback-action}
    fetch-user-info-custom = ${global.handler.fragmentsHandler.config.actions.common-fallback-action}
  }
}