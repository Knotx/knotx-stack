global.handler.fragmentsHandler.config {
  tasks {
    various-methods-for-http-action {
      actions = [
        {
          action = get
        }
        {
          action = post
        }
        {
          action = put
        }
        {
          action = patch
        }
        {
          action = delete
        }
        {
          action = head
        }
      ]
      onTransitions._success {
        action = te-hbs
      }
    }
  }

  actions {
    get {
      factory = http
      config {
        httpMethod = get
        endpointOptions {
          path = /service/mock/get.json
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
        responseOptions {
          forceJson = true
        }
      }
    }
    post {
      factory = http
      config {
        httpMethod = post
        endpointOptions {
          path = /service/mock/post.json
          body = "{\"password\": \"pazzword\"}"
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
    }
    put {
      factory = http
      config {
        httpMethod = put
        endpointOptions {
          path = /service/mock/put.json
          interpolateBody = true
          bodyJson {
            password = pazzword
          }
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
    }
    patch {
      factory = http
      config {
        httpMethod = patch
        endpointOptions {
          path = /service/mock/patch.json
          body = "{\"password\": \"pazzword\"}"
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
    }
    delete {
      factory = http
      config {
        httpMethod = delete
        endpointOptions {
          path = /service/mock/delete.json
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
    }
    head {
      factory = http
      config {
        httpMethod = head
        endpointOptions {
          path = /service/mock/head.json
          domain = localhost
          port = ${test.random.service.port}
          allowedRequestHeaders = ["Content-Type"]
        }
      }
    }
    te-hbs {
      factory = knot
      config {
        address = knotx.knot.te.handlebars
        deliveryOptions {
          sendTimeout = 3000
        }
      }
    }
  }

  taskFactories = [
    {
      factory = default
      config {
        tasks = ${global.handler.fragmentsHandler.config.tasks}
        nodeFactories = [
          {
            factory = action
            config.actions = ${global.handler.fragmentsHandler.config.actions}
          }
          {
            factory = subtasks
          }
        ]
      }
    }
  ]
}
