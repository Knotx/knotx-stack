global.handler.fragmentsHandler.config {
  tasks {
    web-api-test {
      action = fetch-user-info
      onTransitions {
        _success {
          actions = [
            {
              action = get-available-payment-providers
            }
            {
              action = get-available-offers
              onTransitions._error {
                action = attach-error-message-offers-fallback
              }
            }
          ]
          onTransitions {
            _success {
              action = create-response
            }
          }
        }
      }
    }
  }

  actions {
    fetch-user-info {
      factory = http
      config.endpointOptions {
        path = /service/mock/userInfo.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    get-available-payment-providers {
      factory = http
      config.endpointOptions {
        path = /service/mock/paymentProviders.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    get-available-offers { //500
      factory = http
      config.endpointOptions {
        path = /service/mock/specialOffers.xml
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
      config.responseOptions {
        forceJson = true
        predicates = []
      }
    }
    attach-error-message-offers-fallback {
      factory = inline-payload
      config {
        alias = get-available-offers
        payload {
          _result {
            offers {
              status = "error"
              message = "Offers service is currently unavailable, impossible to fetch offers from external data sorce"
            }
          }
        }
      }
    }
    create-response {
      factory = payload-to-body
    }
  }

  taskFactories = [
    {
      factory = default
      config {
        tasks = ${global.handler.fragmentsHandler.config.tasks}
        nodeFactories = [
          {
            factory = action
            config.actions = ${global.handler.fragmentsHandler.config.actions}
          }
          {
            factory = subtasks
          }
        ]
      }
    }
  ]

}