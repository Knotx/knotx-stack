global.handler.fragmentsHandler.config {
  tasks {
    user-task {
      action = fetch-user-info // _success
      onTransitions._success {
        action = te-hbs
      }
    }
    payments-task {
      action = fetch-user-info // _success
      onTransitions._success {
        actions = [
          {
            action = fetch-payment-providers // _success
          }
          {
            action = fetch-offers // _success
          }
        ]
        onTransitions._success {
          action = te-pebble // _success
        }
      }
    }
  }

  actions {
    fetch-user-info {
      factory = http
      config.endpointOptions {
        path = /service/mock/userInfo.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    fetch-payment-providers {
      factory = http
      config.endpointOptions {
        path = /service/mock/paymentProviders.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
    }
    fetch-offers {
      factory = http
      config.endpointOptions {
        path = /service/mock/specialOffers.json
        domain = localhost
        port = ${test.wiremock.mockService.port}
        allowedRequestHeaders = ["Content-Type"]
      }
      config.responseOptions {
        forceJson = true
        predicates = []
      }
    }
    te-hbs {
      factory = knot
      config {
        address = knotx.knot.te.handlebars
        deliveryOptions {
          sendTimeout = 3000
        }
      }
    }
    te-pebble {
      factory = knot
      config {
        address = knotx.knot.te.pebble
        deliveryOptions {
          sendTimeout = 3000
        }
      }
    }
  }

  taskFactories = [
    {
      factory = default
      config {
        tasks = ${global.handler.fragmentsHandler.config.tasks}
        nodeFactories = [
          {
            factory = action
            config.actions = ${global.handler.fragmentsHandler.config.actions}
            config.logLevel = info
          }
          {
            factory = subtasks
          }
        ]
      }
    }
  ]
}